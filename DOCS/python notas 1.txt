comparar pandas.tslib.Timestamp to datetime python

>>> import pandas as pd
>>> t = pd.tslib.Timestamp('2016-03-03 00:00:00')
>>> type(t)
pandas.tslib.Timestamp
>>> t.to_datetime()    #depricated
datetime.datetime(2016, 3, 3, 0, 0)
>>> t.to_pydatetime()	# is the new standar
datetime.datetime(2016, 3, 3, 0, 0)

===========================================================================================================
jupyter notebooks comandos:

Esc 	will take you into command mode where you can navigate around your notebook with arrow keys.
While in command mode:
A 		to insert a new cell above the current cell, B to insert a new cell below.
M 		to change the current cell to Markdown, Y to change it back to code
D + D 	(press the key twice) to delete the current cell

Enter will take you from command mode back into edit mode for the given cell.
Shift + Tab			will show you the Docstring (documentation) for the the object you have just typed in a code cell - you can keep pressing this short cut to cycle through a few modes of documentation.
Ctrl + Shift + - 	will split the current cell into two from where your cursor is.
Esc + F 			Find and replace on your code but not the outputs.
Esc + O 			Toggle cell output.

Select Multiple Cells:
Shift + J or Shift + Down 	selects the next sell in a downwards direction. You can also select sells in an upwards direction by using Shift + K or Shift + Up.
Once cells are selected, you can then delete / copy / cut / paste / run them as a batch. This is helpful when you need to move parts of a notebook.
You can also use Shift + M to merge multiple cells.

mas usos en:
	https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/
	
===========================================================================================================
iphython/jupyter-notebook magic commands:

%alias							Define an alias for a system command.
%alias_magic%autocall			Make functions callable without having to type parentheses.
%automagic						Make magic functions callable without having to type the initial %.
%autosave						Set the autosave interval in the notebook (in seconds).
%bookmark						Manage IPython's bookmark system.
%catAlias for `!cat`%cd			Change the current working directory.
%clear							Clear the terminal.
%colors							Switch color scheme for prompts, info system and exception handlers.
%config							configure IPython
%connect_info					Print information for connecting other clients to this kernel
%cp								Alias for `!cp`
%debug 
%dhist 							Print your history of visited directories.
%dirs							Return the current directory stack.
%doctest_modeToggle 			doctest mode on and off.
%ed								Alias for `%edit`.
%edit							Bring up an editor and execute the resulting code.
%env							Get, set, or list environment variables.
%gui							Enable or disable IPython GUI event loop integration.
%hist							Alias for `%history`.
%history
%killbgscripts					Kill all BG processes started by %%script and its family.
%ldir							Alias for `!ls -F -o --color %l | grep /$`
%less							Show a file through the pager.
%lf								Alias for `!ls -F -o --color %l | grep ^-`
%lk								Alias for `!ls -F -o --color %l | grep ^l`
%ll								Alias for `!ls -F -o --color`
%load							Load code into the current frontend.
%load_ext						Load an IPython extension by its module name.
%loadpy							Alias of `%load`%logoffTemporarily stop logging.
%logon							Restart logging.
%logstart						Start logging anywhere in a session.
%logstate						Print the status of the logging system.
%logstop						Fully stop logging and close log file.
%ls								Alias for `!ls -F --color`
%lsmagic						List currently available magic functions.
%lx								Alias for `!ls -F -o --color %l | grep ^-..x`
%macro							Define a macro for future re-execution. It accepts ranges of history,
%magic							Print information about the magic function system.
%man							Find the man page for the given command and display in pager.
%matplotlib
%mkdir							Alias for `!mkdir`
%more							Show a file through the pager.
%mv								Alias for `!mv`%notebook
%page							Pretty print the object and display it through a pager.
%pastebin						Upload code to Github's Gist paste bin, returning the URL.
%pdb							Control the automatic calling of the pdb interactive debugger.
%pdef							Print the call signature for any callable object.
%pdoc							Print the docstring for an object.
%pfile							Print (or run through pager) the file where an object is defined.
%pinfo							Provide detailed information about an object.
%pinfo2							Provide extra detailed information about an object.
%popd							Change to directory popped off the top of the stack.
%pprint							Toggle pretty printing on/off.
%precision						Set floating point precision for pretty printing.
%profile						Print your currently active IPython profile.
%prun							Run a statement through the python code profiler.
%psearch						Search for object in namespaces by wildcard.
%psource						Print (or run through pager) the source code for an object.
%pushd							Place the current dir on stack and change directory.
%pwd							Return the current working directory path.
%pycat							Show a syntax-highlighted file through a pager.
%pylab
%qtconsole						Open a qtconsole connected to this kernel.
%quickref						Show a quick reference sheet
%quickref_text					Return the quickref text to be assigned to a variable
%recall							Repeat a command, or get command to input line for editing.
%rehashx						Update the alias table with all executable files in $PATH.
%reload_ext						Reload an IPython extension by its module name.
%rep							Alias for `%recall`.
%rerun							Re-run previous input
%reset							Resets the namespace by removing all names defined by the user, if
%reset_selective				Resets the namespace by removing names defined by the user.
%rm								Alias for `!rm`%
rmdir							Alias for `!rmdir`
%run							Run the named file inside IPython as a program.
%save							Save a set of lines or a macro to a given filename.
%sc								Shell capture - run shell command and capture output (DEPRECATED use !).
%set_env						Set environment variables. Assumptions are that either "val" is a
%store							Lightweight persistence for python variables.
%sx								Shell execute - run shell command and capture output (!! is short-hand).
%system							Shell execute - run shell command and capture output (!! is short-hand).
%tb								Print the last traceback with the currently active exception mode.
%time							Time execution of a Python statement or expression.
%timeit							Time execution of a Python statement or expression
%unalias						Remove an alias
%unload_ext						Unload an IPython extension by its module name.
%who							Print all interactive variables, with some minimal formatting.
%who_ls							Return a sorted list of all interactive variables.
%whos							Like %who, but gives some extra information about each variable.
%xdel							Delete a variable, trying to clear it from anywhere that
%xmode							Switch modes for the exception handlers.
%%!								Shell execute - run shell command and capture output (!! is short-hand).
%%HTML							Alias for `%%html`.
%%SVG							Alias for `%%svg`.
%%bash							%%bash script magic
%%capture
%%debug
%%file							Alias for `%%writefile`.
%%html							Render the cell as a block of HTML
%%javascript					Run the cell block of Javascript code
%%js							Run the cell block of Javascript code
%%latex							Render the cell as a block of latex
%%perl							%%perl script magic
%%prun							Run a statement through the python code profiler.
%%pypy							%%pypy script magic%
%python							%%python script magic
%%python2						%%python2 script magic
%%python3						%%python3 script magic
%%ruby							%%ruby script magic
%%script
%%sh							%%sh script magic
%%svg							Render the cell as an SVG literal
%%sx							Shell execute - run shell command and capture output (!! is short-hand).
%%system						Shell execute - run shell command and capture output (!! is short-hand).
%%time							Time execution of a Python statement or expression.
%%timeit						Time execution of a Python statement or expression
%%writefile

===========================================================================================================
dbg.set_trace() Debugger Commandos:

h(elp)		lista todos los comandos
h [command] ayuda del comando
q(uit) 		exit the debugger

l(ist) 		list 11 lines surrounding the current line
w(here) 	display the file and line number of the current line
n(ext) 		execute the current line
s(tep) 		step into functions called at the current line
r(eturn) 	execute until the current function’s return is encountered

b[#] 		create a breakpoint at line [#]
b 			list breakpoints and their indices
c(ontinue) 	execute until a breakpoint is encountered
clear[#] 	clear breakpoint of index [#]

p<name> 	print value of the variable <name>
!<expr> 	execute the expression <expr>
			NOTE: this acts just like a python interpreter
run[args] 	restart the debugger with sys.argv arguments [args]

===========================================================================================================
deshabilitar modos standby sleep y hibernate

c:\windows\system32\powercfg.exe /change -disk-timeout-ac 0
c:\windows\system32\powercfg.exe /change -disk-timeout-dc 0
c:\windows\system32\powercfg.exe /change -standby-timeout-ac 0
c:\windows\system32\powercfg.exe /change -standby-timeout-dc 0
c:\windows\system32\powercfg.exe /change -hibernate-timeout-ac 0
c:\windows\system32\powercfg.exe /change -hibernate-timeout-dc 0
c:\windows\system32\powercfg.exe /x -standby-timeout-ac 0
c:\windows\system32\powercfg.exe /x -standby-timeout-dc 0


https://superuser.com/questions/368022/how-to-disable-sleep-mode-via-cmd

powercfg.exe /h off 

powercfg /q >poweroptions.txt
buscar los GUID para :
	Balanced
	Power buttons and lid
	Lid close action

ejecutar para cada uno:
	Powercfg –SETACVALUEINDEX [put power scheme GUID here] [put subgroup GUID here] [put power setting GUID here] 000
	Powercfg –SETDCVALUEINDEX [put power scheme GUID here] [put subgroup GUID here] [put power setting GUID here] 000

reiniciar PC

===========================================================================================================

python solid  y TDD

https://dzone.com/articles/tdd-python-5-minutes
https://twistedmatrix.com/documents/16.5.0/core/howto/trial.html

https://miguelgomez.io/python/principios-solid-python/
https://es.slideshare.net/DrTrucho/python-solid


=====================================================================================================

raise NotImplementedError("To be implemented")

===========================================================================================================

ver la posision donde un datetime index tiene un valor

pmin = bh.index.get_loc( 'datetime')

ver la posision donde el date time index tiene el minimo
pmin = bh.index.get_loc(bh['cum_change'].argmin())

===========================================================================================================
iterar un objeto y sus valores

def LogObjectValues(obj, msg=''):
    for attr, value in obj.__dict__.iteritems():
        LogEvent(msg)
        LogEvent( '{a}:    {v}'.format(str(sattr), str(value)))
		
===========================================================================================================

error
Class 'sqlalchemy.ext.declarative.api.DeclarativeMeta' is not mapped; was a class (DTO.MyTrades) supplied where an instance was required?
correccion 
donde decia 
session.expunge(MyTrades)
colocar
session.expunge(oTrade)

===========================================================================================================
error byte por segundo en jupyter

iniciar con:
jupyter notebook --NotebookApp.iopub_data_rate_limit=1.0e10

============================================================================================================

kraken assets


"BCH":{"aclass":"currency","altname":"BCH","decimals":10,"display_decimals":5}, BITCOIN CASH

"DASH":{"aclass":"currency","altname":"DASH","decimals":10,"display_decimals":5}, DASH

"EOS":{"aclass":"currency","altname":"EOS","decimals":10,"display_decimals":5}, EOS, BASADOS EN TOKENS

"GNO":{"aclass":"currency","altname":"GNO","decimals":10,"display_decimals":5}, GNO, BASADO EN TOKENS
,
"USDT":{"aclass":"currency","altname":"USDT","decimals":8,"display_decimals":4},  USDT, BASADO EN DOLAR CASI 1 A 1

"XDAO":{"aclass":"currency","altname":"DAO","decimals":10,"display_decimals":3}, DAO, murio

"XETC":{"aclass":"currency","altname":"ETC","decimals":10,"display_decimals":5}, ETHEREUM CLASSIC, HARD FORK DE ETHEREUM, NO MUCHO AU

"XETH":{"aclass":"currency","altname":"ETH","decimals":10,"display_decimals":5}, ETHEREUM

"XICN":{"aclass":"currency","altname":"ICN","decimals":10,"display_decimals":5}, ICONOMI will be an Open Fund Management platform (OFM) and we'll create two types of new financial instruments - the ICONOMI Coin Traded Fund (CTF) and the ICONOMI Coin Managed Fund (CMF).
"XLTC":{"aclass":"currency","altname":"LTC","decimals":10,"display_decimals":5}, litelcoin , fork de bitcoin core October 7, 2011
"XMLN":{"aclass":"currency","altname":"MLN","decimals":10,"display_decimals":5}, Melonport similar a iconomi
"XNMC":{"aclass":"currency","altname":"NMC","decimals":10,"display_decimals":5}, Namecoin , Namecoin (NMC) is a decentralized open-source cryptocurrency forked from Bitcoin in 2011, con algunas ignovaciones
"XREP":{"aclass":"currency","altname":"REP","decimals":10,"display_decimals":5}, Augur is an Ethereum-based decentralized prediction market that leverages the wisdom of the crowds to create a search engine for the future that runs on its own token, REP. Augur allows users to create their markets for specific questions they may have and to profit from the trading buys while allowing users to buy positive or negative shares regarding the outcome of a future event
"XXBT":{"aclass":"currency","altname":"XBT","decimals":10,"display_decimals":5}, BITCOIN
"XXDG":{"aclass":"currency","altname":"XDG","decimals":8,"display_decimals":2},  Dogecoin es una criptodivisa derivada de Litecoin
"XXLM":{"aclass":"currency","altname":"XLM","decimals":8,"display_decimals":5},  Stellar Lumens, capital moderado...
"XXMR":{"aclass":"currency","altname":"XMR","decimals":10,"display_decimals":5},
"XXRP":{"aclass":"currency","altname":"XRP","decimals":8,"display_decimals":5},
"XXVN":{"aclass":"currency","altname":"XVN","decimals":4,"display_decimals":2},
"XZEC":{"aclass":"currency","altname":"ZEC","decimals":10,"display_decimals":5}, Zcash

"ZCAD":{"aclass":"currency","altname":"CAD","decimals":4,"display_decimals":2},
"ZEUR":{"aclass":"currency","altname":"EUR","decimals":4,"display_decimals":2},
"ZJPY":{"aclass":"currency","altname":"JPY","decimals":2,"display_decimals":0},
"ZGBP":{"aclass":"currency","altname":"GBP","decimals":4,"display_decimals":2},
"ZKRW":{"aclass":"currency","altname":"KRW","decimals":2,"display_decimals":0},
"ZUSD":{"aclass":"currency","altname":"USD","decimals":4,"display_decimals":2}}
}

